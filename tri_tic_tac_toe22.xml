<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.
typedef int[0,8] position;



//bool firstToplay = false;
bool ftp = false;

 //int onBoard;
int track_player = -1;
//int p = 0;
//int onBoard = 0;

int WINNER = 0;

 int board[9] = {0,0,0,0,0,0,0,0,0};

//int board[9] = {false, false, false, false, false, false, false, false, false};
</declaration><template><name x="5" y="5">player</name><declaration>// Place local declarations here.
clock x;


void mark_O(position p) {

if (board[p] == false) {

board[p] = 1;
}

}



void mark_X(position p) {

if (board[p] == false) {

board[p] = 2;
}


}


void winPlayer(int k){

WINNER = board[k];

}


void firstToplay(int j){
 if (ftp == false) {

ftp = true;

//board[0] = j;
//board[1] = j;
//board[2] = j;
//board[3] = j;
//board[4] = j;
//board[5] = j;

//p = j;
track_player = j;

}

}




bool observe(position p){


//int onBoard = -1;
// int onBoard = 0;
bool enable = false;


if (p==0){

		if ( board[0] == board[1] &amp;&amp; board[1] == board[2] &amp;&amp; board[2] != 0 ){
   				 enable = true;
				// onBoard = board[p];

  				 return enable;
		}



		if ( board[0] == board[5] &amp;&amp; board[5] == board[4] &amp;&amp; board[4] != 0 ){
   				 enable = true;
			//	onBoard = board[p];

  				 return enable;
		}


		if (board[0] == board[6] &amp;&amp; board[6] == board[3] &amp;&amp; board[3] != 0){
   				 enable = true;
			//	onBoard = board[p];

  				 return enable;
		}

}






if (p==1){

		if (board[0] == board[1] &amp;&amp; board[1] == board[2] &amp;&amp; board[2] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}



		if (board[1] == board[8] &amp;&amp; board[8] == board[6] &amp;&amp; board[6] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}


		if (board[1] == board[7] &amp;&amp; board[7] == board[4] &amp;&amp; board[4] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}

}





if (p==2){

		if (board[0] == board[1] &amp;&amp; board[1] == board[2] &amp;&amp; board[2] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}



		if (board[2] == board[3] &amp;&amp; board[3] == board[4] &amp;&amp; board[4] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}


		if (board[2] == board[8] &amp;&amp; board[8] == board[5] &amp;&amp; board[5] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}

}



if (p==3){

		if (board[4] == board[3] &amp;&amp; board[3] == board[2] &amp;&amp; board[2] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}



		if (board[3] == board[7] &amp;&amp; board[7] == board[8] &amp;&amp; board[8] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}


		if (board[0] == board[6] &amp;&amp; board[6] == board[3] &amp;&amp; board[3] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}

}



if (p==4){

		if (board[4] == board[3] &amp;&amp; board[3] == board[2] &amp;&amp; board[2] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}



		if (board[0] == board[5] &amp;&amp; board[5] == board[4] &amp;&amp; board[4] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}


		if (board[4] == board[7] &amp;&amp; board[7] == board[1] &amp;&amp; board[1] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}

}


if (p==5){

		if (board[5] == board[8] &amp;&amp; board[8] == board[2] &amp;&amp; board[2] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}



		if (board[0] == board[5] &amp;&amp; board[5] == board[4] &amp;&amp; board[4] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}


		if (board[5] == board[6] &amp;&amp; board[6] == board[7] &amp;&amp; board[7] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}

}


if (p==6){

		if (board[6] == board[8] &amp;&amp; board[8] == board[1] &amp;&amp; board[1] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}



		if (board[5] == board[6] &amp;&amp; board[6] == board[7] &amp;&amp; board[7] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}


		if (board[0] == board[6] &amp;&amp; board[6] == board[3] &amp;&amp; board[3] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}

}


if (p==7){

		if (board[3] == board[7] &amp;&amp; board[7] == board[8] &amp;&amp; board[8] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}



		if (board[5] == board[6] &amp;&amp; board[6] == board[7] &amp;&amp; board[7] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}


		if (board[4] == board[7] &amp;&amp; board[7] == board[1] &amp;&amp; board[1] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}

}


if (p==8){

		if (board[3] == board[7] &amp;&amp; board[7] == board[8] &amp;&amp; board[8] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}



		if (board[1] == board[8] &amp;&amp; board[8] == board[6] &amp;&amp; board[6] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}


		if (board[2] == board[8] &amp;&amp; board[8] == board[5] &amp;&amp; board[5] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}

}




return enable;


}</declaration><location id="id0" x="-416" y="152" color="#00ff00"><name x="-426" y="122">Goal</name></location><location id="id1" x="-112" y="32"><committed/></location><location id="id2" x="16" y="-40"><name x="-24" y="-56">INIT</name></location><init ref="id2"/><transition><source ref="id1"/><target ref="id2"/><nail x="32" y="48"/></transition><transition action=""><source ref="id1"/><target ref="id0"/><label kind="select" x="-324" y="47">i:position</label><label kind="guard" x="-324" y="62">(WINNER == track_player) &amp;&amp; observe(i)</label></transition><transition action=""><source ref="id2"/><target ref="id1"/><label kind="select" x="-96" y="-24">i:position</label><label kind="assignment" x="-72" y="8">winPlayer(i)</label></transition><transition action=""><source ref="id2"/><target ref="id2"/><label kind="select" x="264" y="-24">i:position</label><label kind="assignment" x="256" y="24">mark_O(i), firstToplay(1)</label><nail x="264" y="-32"/><nail x="240" y="48"/></transition><transition controllable="false" action=""><source ref="id2"/><target ref="id2"/><label kind="select" x="8" y="-248">i:position</label><label kind="guard" x="80" y="-176">x&gt;10</label><label kind="assignment" x="-176" y="-184">mark_X(i), firstToplay(2)</label><nail x="-8" y="-224"/><nail x="96" y="-224"/></transition></template><template><name>observer</name><declaration>bool observe(position p){


//int onBoard = -1;
//onBoard = 0;
bool enable = false;


if (p==0){

		if ( board[0]==board[1]==board[2] != 0 ){
   				 enable = true;
			//	onBoard = board[p];

  				 return enable;
		}



		if ( board[0]==board[5]==board[4] != 0 ){
   				 enable = true;
			//	onBoard = board[p];

  				 return enable;
		}


		if (board[0]==board[6]==board[3] != 0){
   				 enable = true;
			//	onBoard = board[p];

  				 return enable;
		}

}






if (p==1){

		if (board[0]==board[1]==board[2] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}



		if (board[1]==board[8]==board[6] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}


		if (board[1]==board[7]==board[4] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}

}





if (p==2){

		if (board[0]==board[1]==board[2] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}



		if (board[2]==board[3]==board[4]!= 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}


		if (board[2]==board[8]==board[5] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}

}



if (p==3){

		if (board[4]==board[3]==board[2] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}



		if (board[3]==board[7]==board[8]!= 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}


		if (board[0]==board[6]==board[3] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}

}



if (p==4){

		if (board[4]==board[3]==board[2] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}



		if (board[0]==board[5]==board[4]!= 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}


		if (board[4]==board[7]==board[1]!= 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}

}


if (p==5){

		if (board[5]==board[8]==board[2]!= 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}



		if (board[0]==board[5]==board[4] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}


		if (board[5]==board[6]==board[7]!= 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}

}


if (p==6){

		if (board[6]==board[8]==board[1] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}



		if (board[5]==board[6]==board[7] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}


		if (board[0]==board[6]==board[3] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}

}


if (p==7){

		if (board[3]==board[7]==board[8] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}



		if (board[5]==board[6]==board[7] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}


		if (board[4]==board[7]==board[1] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}

}


if (p==8){

		if (board[3]==board[7]==board[8] != 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}



		if (board[1]==board[8]==board[6]!= 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}


		if (board[2]==board[8]==board[5]!= 0){
   				 enable = true;
		//		onBoard = board[p];

  				 return enable;
		}

}










return enable;


}</declaration><location id="id3" x="-8" y="-56" color="#00ff00"><name x="-18" y="-86">Goal</name></location><location id="id4" x="-312" y="-48"><name x="-376" y="-64">INIT</name><label kind="comments">INIT</label></location><init ref="id4"/><transition action=""><source ref="id4"/><target ref="id3"/><label kind="select" x="-220" y="-97">i:position</label><label kind="guard" x="-220" y="-82">observe(i)</label></transition></template><system>// Place template instantiations here.
// Process = Template();

// List one or more processes to be composed into a system.
//system player, observer;

system player;</system></nta>